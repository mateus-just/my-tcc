name: drupal9
recipe: drupal9
config:
  webroot: /web
  php: '8.1'
  via: apache
  index: false
  edge: false
  cache: false
  xdebug: debug
  composer_version: 2.2.6
proxy:
  phpmyadmin:
    - phpmyadmin.drupal9.lndo.site
  mailhog:
    - mailhog.drupal9.lndo.site
services:
  appserver:
    run_as_root:
      # - bash EXAMPLE! RUN SOME SCRIPT
  phpserver:
    type: php
    config: 
      php: config/lando/php.ini
  nodeserver:
    type: node:16
    ssl: true
    globals:
      npm-cli: latest
      gulp-cli: latest
    build:
      - npm install && gulp install
    command: npm start
  phpmyadmin:
    type: phpmyadmin
    hosts:
      - database
  mailhog:
    # Use the latest mailhog version
    type: mailhog
    # List of services that we want to capture mail from
    # You can run `lando info` to get a list of services that are available
    # Mailhog expects that these services will be php services
    hogfrom:
      - appserver
    # Optionally allow access to the smtp service at localhost:1026
    # You will need to make sure port 1026 is open on your machine
    #
    # You can also set `portforward: true` to have Lando dynamically assign
    # an open port. Unlike specifying an actual port setting this to true will give you
    # a different port every time you restart your app
    portforward: 1026
events:
  post-start:
    #- bash /app/scripts/post-start.sh
  post-db-import:
    - appserver: bash /app/scripts/post-db-import.sh
tooling:
  drush:
    service: appserver
    env:
      DRUSH_OPTIONS_URI: "https://drupal9.lndo.site"
  npm:
    service: nodeserver
  gulp:
    service: nodeserver
  yarn:
    service: nodeserver
  xdebug-on:
    service: appserver
    description: Enable Xdebug.
    user: root
    cmd:
      - echo "xdebug.mode = develop,debug" > /usr/local/etc/php/conf.d/zzzz-sqd-xdebug-config.ini
      - echo "xdebug.start_with_request = yes" >> /usr/local/etc/php/conf.d/zzzz-sqd-xdebug-config.ini
      - echo "xdebug.discover_client_host=1" >> /usr/local/etc/php/conf.d/zzzz-sqd-xdebug-config.ini
      - docker-php-ext-enable xdebug && kill -USR2 $(pgrep -o php-fpm) > /dev/null || /etc/init.d/apache2 reload
      - tput setaf 2 && echo "Xdebug On" && tput sgr 0 && echo
  xdebug-off:
    service: appserver
    description: Disable Xdebug.
    user: root
    cmd:
      - rm /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && kill -USR2 $(pgrep -o php-fpm) > /dev/null || /etc/init.d/apache2 reload
      - tput setaf 1 && echo "Xdebug Off" && tput sgr 0 && echo